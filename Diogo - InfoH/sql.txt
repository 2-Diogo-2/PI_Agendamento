-- Criação do banco de dados
CREATE DATABASE IF NOT EXISTS plataforma_shows;
USE plataforma_shows;

-- Tabela de usuários
CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    senha VARCHAR(255) NOT NULL,
    tipo_usuario ENUM('gerente_banda', 'espaco_apresentacao', 'usuario_comum', 'administrador') NOT NULL,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de bandas
CREATE TABLE IF NOT EXISTS bandas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome_banda VARCHAR(255) NOT NULL,
    genero VARCHAR(255) NOT NULL,
    descricao TEXT,
    email VARCHAR(255) UNIQUE NOT NULL,
    redes_sociais TEXT,
    usuario_id INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

-- Tabela de espaços
CREATE TABLE IF NOT EXISTS espacos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome_espaco VARCHAR(255) NOT NULL,
    endereco VARCHAR(255) NOT NULL,
    capacidade INT NOT NULL,
    tipo_ambiente ENUM('interno', 'externo', 'misturado') NOT NULL,
    descricao TEXT,
    cidade VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    redes_sociais TEXT,
    usuario_id INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Tabela de fotos da banda
CREATE TABLE IF NOT EXISTS fotos_banda (
    id INT AUTO_INCREMENT PRIMARY KEY,
    band_id INT NOT NULL,
    foto_url VARCHAR(255) NOT NULL,
    FOREIGN KEY (band_id) REFERENCES bandas(id) ON DELETE CASCADE
);

-- Tabela de fotos do espaço
CREATE TABLE IF NOT EXISTS fotos_espaco (
    id INT AUTO_INCREMENT PRIMARY KEY,
    espaco_id INT NOT NULL,
    foto_url VARCHAR(255) NOT NULL,
    FOREIGN KEY (espaco_id) REFERENCES espacos(id) ON DELETE CASCADE
);

-- Tabela de avaliações
CREATE TABLE IF NOT EXISTS avaliacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    referencia_id INT NOT NULL,
    tipo ENUM('banda', 'espaco') NOT NULL,
    usuario_id INT NOT NULL,
    nota INT NOT NULL CHECK (nota BETWEEN 1 AND 5),
    comentario TEXT,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Tabela de agendamentos
CREATE TABLE IF NOT EXISTS agendamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    banda_id INT NOT NULL,
    espaco_id INT NOT NULL,
    data_agendamento DATETIME NOT NULL,
    status ENUM('pendente', 'confirmado', 'cancelado') DEFAULT 'pendente',
    FOREIGN KEY (banda_id) REFERENCES bandas(id),
    FOREIGN KEY (espaco_id) REFERENCES espacos(id)
);

-- Tabela de solicitações de agendamento
CREATE TABLE IF NOT EXISTS solicitacoes_agendamento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    banda_id INT NOT NULL,
    espaco_id INT NOT NULL,
    data_agendamento DATETIME NOT NULL,
    status ENUM('pendente', 'aceito', 'negado', 'negociacao') DEFAULT 'pendente',
    nova_data DATETIME DEFAULT NULL,
    nova_quantia DECIMAL(10, 2) DEFAULT NULL,
    usuario_id_destinatario INT,
    usuario_id_solicitante INT,
    FOREIGN KEY (banda_id) REFERENCES bandas(id),
    FOREIGN KEY (espaco_id) REFERENCES espacos(id)
);

-- Tabela de Avaliações
CREATE TABLE IF NOT EXISTS avaliacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    referencia_id INT NOT NULL, -- ID da banda ou espaço
    tipo ENUM('banda', 'espaco') NOT NULL, -- Tipo de referência
    usuario_id INT NOT NULL, -- ID do usuário que avaliou
    nota INT NOT NULL CHECK (nota BETWEEN 1 AND 5), -- Avaliação em estrelas
    comentario TEXT,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);